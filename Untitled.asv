%% Exercise 1.2
clc; clear all; close all;
S = gen_rectangles(50);
S = importdata('shortaxes.mat');
figure(1);
plot_shapes(S,'Marker','none');
Sa = align_all_shapes(S);
Sb = align_all_shapes(S, 'tangent_projection',0);
Sm = mean(Sa, 2);
Sm2 = mean(Sb, 2);
figure(2);
plot_shapes(Sa, '-b');
figure(3);
plot_shapes(Sm, '-b');

%% Exercise 1.3
%  S = importdata('shortaxes.mat');
%  Sa = align_all_shapes(S);
%  pca = compute_pca(Sa, 'reduce', 0.85)
%  pareto(pca.var/sum(pca.var));

 
%% Exercise 1.4
S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
pca = compute_pca(Sa, 'reduce', 0.98);
shape_viewer(pca)

%% Exercise 1.5
S = importdata('shortaxes.mat');
%plot_shapes(S,'Marker','none');
Sa = align_all_shapes(S);
Sm = mean(Sa, 2);
pts = create_mask(Sm, 'extent',3);
plot(pts(:,1),pts(:,2),'r.');
hold on;
plot_shapes(Sm,'-b');
pt = thin_plate_spline(Sm,Sa(:,5),pts);
plot(pts(:,1),pts(:,2),'r.');
hold on;
plot_shapes(Sm, '-b');
figure;
plot(pt(:,1),pt(:,2),'r.');
hold on
plot_shapes(Sa(:,5),'-b');

%% Exercise 1.6
clear all; close all; clc;
startup;
S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
shape_pca = compute_pca(Sa, 'reduce', 1);
Sm = mean(Sa, 2);
mask = create_mask(Sm, 'extent', 1.1);
fnames = importdata('samri_data/mri_sa.txt');
G = [];
for i = 1:length(fnames)
    P = thin_plate_spline(shape_pca.mean, S(:,i), mask);
    G(:,i) = intensity_sampling(fnames{i}, P);
    disp(sprintf('Sampling from %s', fnames{i}));
end

figure;
plot_texture(mask, G(:,1));

% QUESTION klopt het dat de texture wordt vervormd op basis van grid
% points?

%% Exercise 1.7
Gn = photometric_normalization(G);
figure(1);
plot_texture(mask, G(:,10));
figure(2);
plot_texture(mask, Gn(:,10));

% QUESTIONS we don't see any difference at all...

%% Exercise 1.8
clear all; close all; clc;
startup;
S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
pca_shape = compute_pca(Sa, 'reduce', 0.984);
Sm = mean(Sa, 2);
mask = create_mask(Sm, 'extent', 1.1);
fnames = importdata('samri_data/mri_sa.txt');
G = [];
for i = 1:length(fnames)
    P = thin_plate_spline(pca_shape.mean, S(:,i), mask);
    G(:,i) = intensity_sampling(fnames{i}, P);
    disp(sprintf('Sampling from %s', fnames{i}));
end
% plot_texture(pts, G(:, 1));
pca_texture = compute_pca(G, 'reduce', 0.984);
% plot_texture(pts, pca_texture.mean);
% texture_viewer(pca_texture, pts);

%% Exercise 1.9
Gn = photometric_normalization(G);
pca_texture_normalized = compute_pca(Gn, 'reduce', 0.984);
total_variance_intensity = sum(pca_texture_normalized.var);
total_variance_shape = sum(pca_shape.var);

%% Exercise 1.10
ratio = sqrt(total_variance_intensity / total_variance_shape);
Ws = ratio;
% Ws = ratio * eye(size(pca_shape.b, 1));

bs = pca_shape.b;
bg = pca_texture.b;
b = [Ws * bs; bg];
b(end, :) = [];
pca_of_b = compute_pca(b, 'remove_mean', 0, 'reduce', 0.984);
pca_of_b_with_mean = compute_pca(b, 'reduce', 0.984);

mean_b = mean(b, 2);
mask = create_mask(mean_b, 'extent', 1.1);
plot_appearance(bs, bg, pca_of_b_with_mean.mean, mask);

%% Exercise 1.10 - version 2
clear all; close all; clc;
startup;
S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
shape_pca = compute_pca(Sa, 'reduce', 0.98);
fnames = importdata('samri_data/mri_sa.txt');
[G, mask] = generate_texture_samples(shape_pca.mean, S, fnames);
Gn = photometric_normalization(G);
texture_pca = compute_pca(Gn, 'reduce', 0.98);
Ws = sqrt(sum(texture_pca.var) / sum(shape_pca.var));
app_pca = compute_pca([Ws * shape_pca.b; texture_pca.b], 'remove_mean', 0, 'reduce', 0.98);
% shape_mean = S(:, 1) - app_pca.phi * app_pca.b;

% Mean
plot_appearance(S, texture_pca.mean, shape_pca.mean, mask);

% Original
figure;
plot_shapes(S(:, 1), '-r');

% Reconstructed
figure;
tmp = shape_pca.phi * shape_pca.b;
plot_shapes(shape_pca.mean + tmp(:, 1), '-b');

%% Exercise 11
clear all; close all; clc;
startup;
S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
shape_pca = compute_pca(Sa, 'reduce', 0.98);
fnames = importdata('samri_data/mri_sa.txt');
[G, mask] = generate_texture_samples(shape_pca.mean, S, fnames);
Gn = photometric_normalization(G);
texture_pca = compute_pca(Gn, 'reduce', 0.98);
Ws = sqrt(sum(texture_pca.var) / sum(shape_pca.var));
app_pca = compute_pca([Ws * shape_pca.b; texture_pca.b], 'remove_mean', 0, 'reduce', 0.98);
appearance_viewer(shape_pca, texture_pca, app_pca, mask, Ws);

%% Exercise 2.2
clear all; close all; clc;
startup;

S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
shape_pca = compute_pca(Sa, 'reduce', 0.98);

fnames = importdata('samri_data/mri_sa.txt');
[G, mask] = generate_texture_samples(shape_pca.mean, S, fnames);
Gn = photometric_normalization(G);
texture_pca = compute_pca(Gn, 'reduce', 0.98);

Ws = sqrt(sum(texture_pca.var) / sum(shape_pca.var));
app_pca = compute_pca([Ws * shape_pca.b; texture_pca.b], 'reduce', 0.98);

Rt = pose_prediction(shape_pca, texture_pca, app_pca, Ws, fnames, S, mask, 'select', 1:5);

figure(1);
plot_texture(mask, Rt(1, :)');
figure(2);
plot_texture(mask, Rt(2, :)');
figure(3);
plot_texture(mask, Rt(3, :)');
figure(4);
plot_texture(mask, Rt(4, :)');

%% Exercise 2.3
clear all; close all; clc;
startup;

S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
shape_pca = compute_pca(Sa, 'reduce', 0.98);

fnames = importdata('samri_data/mri_sa.txt');
[G, mask] = generate_texture_samples(shape_pca.mean, S, fnames);
Gn = photometric_normalization(G);
texture_pca = compute_pca(Gn, 'reduce', 0.98);

Ws = sqrt(sum(texture_pca.var) / sum(shape_pca.var));
app_pca = compute_pca([Ws * shape_pca.b; texture_pca.b], 'reduce', 0.98);

Rc = params_prediction(shape_pca, texture_pca, app_pca, Ws, fnames, S, mask, 'select', 1:3);

figure(1);
plot_texture(mask, Rc(1, :)');
figure(2);
plot_texture(mask, Rc(2, :)');

%% Exercise 2.4
Rt = importdata('Rt50.mat');
Rc = importdata('Rc50.mat');

%% Exercise 2.5
clear all; close all; clc;
startup;

S = importdata('shortaxes.mat');
Sa = align_all_shapes(S);
shape_m = compute_pca(Sa, 'reduce', 0.98);

fnames = importdata('samri_data/mri_sa.txt');
[G, mask] = generate_texture_samples(shape_m.mean, S, fnames);
Gn = photometric_normalization(G);
texture_m = compute_pca(Gn, 'reduce', 0.98);

Ws = sqrt(sum(texture_m.var) / sum(shape_m.var));
app_m = compute_pca([Ws * shape_m.b; texture_m.b], 'remove_mean', 0, 'reduce', 0.98);

% QUESTION: why does aam_matching.m give a white screen and an error?

% Rt = pose_prediction(shape_m, texture_m, app_m, Ws, fnames, S, mask, 'select', 1:5);
% Rc = params_prediction(shape_m, texture_m, app_m, Ws, fnames, S, mask, 'select', 1:3);